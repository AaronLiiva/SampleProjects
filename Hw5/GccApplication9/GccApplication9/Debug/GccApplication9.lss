
GccApplication9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000112  00800100  00000e6e  00000f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800212  00800212  00001014  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f7d  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c5  00000000  00000000  000030a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d4b  00000000  00000000  00003a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  000047bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005df  00000000  00000000  000049c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e4c  00000000  00000000  00004f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00005deb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	12 e0       	ldi	r17, 0x02	; 2
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee e6       	ldi	r30, 0x6E	; 110
  70:	fe e0       	ldi	r31, 0x0E	; 14
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a2 31       	cpi	r26, 0x12	; 18
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	22 e0       	ldi	r18, 0x02	; 2
  80:	a2 e1       	ldi	r26, 0x12	; 18
  82:	b2 e0       	ldi	r27, 0x02	; 2
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	aa 31       	cpi	r26, 0x1A	; 26
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 32 05 	call	0xa64	; 0xa64 <main>
  92:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCD_AllSegments>:
//This performs adjustments needed to undo actions of Butterfly boot loader
void BootLoaderFixes(void)
{
	//Boot loader Disables E2 and E3 digital input drivers, which are used for left and right
	//The following code re-enables them by clearing the appropriate disable bits
	DIDR1 &= ~((1<<AIN0D)|(1<<AIN1D));
  9a:	81 11       	cpse	r24, r1
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	06 c0       	rjmp	.+12     	; 0xae <LCD_AllSegments+0x14>
  a2:	e9 2f       	mov	r30, r25
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	e4 51       	subi	r30, 0x14	; 20
  a8:	ff 4f       	sbci	r31, 0xFF	; 255
  aa:	80 83       	st	Z, r24
  ac:	9f 5f       	subi	r25, 0xFF	; 255
  ae:	94 31       	cpi	r25, 0x14	; 20
  b0:	c0 f3       	brcs	.-16     	; 0xa2 <LCD_AllSegments+0x8>
  b2:	08 95       	ret

000000b4 <LCD_Init>:
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_AllSegments>
  ba:	e7 ee       	ldi	r30, 0xE7	; 231
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8f 60       	ori	r24, 0x0F	; 15
  c2:	80 83       	st	Z, r24
  c4:	87 eb       	ldi	r24, 0xB7	; 183
  c6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
  ca:	87 e0       	ldi	r24, 0x07	; 7
  cc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
  d0:	80 ec       	ldi	r24, 0xC0	; 192
  d2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  d6:	80 81       	ld	r24, Z
  d8:	80 6e       	ori	r24, 0xE0	; 224
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <LCD_WriteDigit>:
  de:	66 30       	cpi	r22, 0x06	; 6
  e0:	a8 f5       	brcc	.+106    	; 0x14c <LCD_WriteDigit+0x6e>
  e2:	96 ed       	ldi	r25, 0xD6	; 214
  e4:	98 0f       	add	r25, r24
  e6:	91 35       	cpi	r25, 0x51	; 81
  e8:	68 f4       	brcc	.+26     	; 0x104 <LCD_WriteDigit+0x26>
  ea:	81 36       	cpi	r24, 0x61	; 97
  ec:	08 f0       	brcs	.+2      	; 0xf0 <LCD_WriteDigit+0x12>
  ee:	8f 7d       	andi	r24, 0xDF	; 223
  f0:	8a 52       	subi	r24, 0x2A	; 42
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	e4 5f       	subi	r30, 0xF4	; 244
  fc:	fe 4f       	sbci	r31, 0xFE	; 254
  fe:	40 81       	ld	r20, Z
 100:	51 81       	ldd	r21, Z+1	; 0x01
 102:	02 c0       	rjmp	.+4      	; 0x108 <LCD_WriteDigit+0x2a>
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	76 2f       	mov	r23, r22
 10a:	71 70       	andi	r23, 0x01	; 1
 10c:	60 ff       	sbrs	r22, 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <LCD_WriteDigit+0x36>
 110:	3f e0       	ldi	r19, 0x0F	; 15
 112:	01 c0       	rjmp	.+2      	; 0x116 <LCD_WriteDigit+0x38>
 114:	30 ef       	ldi	r19, 0xF0	; 240
 116:	66 95       	lsr	r22
 118:	e6 2f       	mov	r30, r22
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	e4 51       	subi	r30, 0x14	; 20
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	12 c0       	rjmp	.+36     	; 0x148 <LCD_WriteDigit+0x6a>
 124:	84 2f       	mov	r24, r20
 126:	8f 70       	andi	r24, 0x0F	; 15
 128:	52 95       	swap	r21
 12a:	42 95       	swap	r20
 12c:	4f 70       	andi	r20, 0x0F	; 15
 12e:	45 27       	eor	r20, r21
 130:	5f 70       	andi	r21, 0x0F	; 15
 132:	45 27       	eor	r20, r21
 134:	77 23       	and	r23, r23
 136:	11 f0       	breq	.+4      	; 0x13c <LCD_WriteDigit+0x5e>
 138:	82 95       	swap	r24
 13a:	80 7f       	andi	r24, 0xF0	; 240
 13c:	90 81       	ld	r25, Z
 13e:	93 23       	and	r25, r19
 140:	89 2b       	or	r24, r25
 142:	80 83       	st	Z, r24
 144:	35 96       	adiw	r30, 0x05	; 5
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	24 30       	cpi	r18, 0x04	; 4
 14a:	60 f3       	brcs	.-40     	; 0x124 <LCD_WriteDigit+0x46>
 14c:	08 95       	ret

0000014e <WelcomeMessage>:
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	c0 e0       	ldi	r28, 0x00	; 0
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	43 c1       	rjmp	.+646    	; 0x3de <__EEPROM_REGION_LENGTH__+0x1de>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_AllSegments>
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 176:	63 e0       	ldi	r22, 0x03	; 3
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 17e:	64 e0       	ldi	r22, 0x04	; 4
 180:	87 e5       	ldi	r24, 0x57	; 87
 182:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	84 e3       	ldi	r24, 0x34	; 52
 18a:	9c e0       	ldi	r25, 0x0C	; 12
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <WelcomeMessage+0x3e>
 194:	00 c0       	rjmp	.+0      	; 0x196 <WelcomeMessage+0x48>
 196:	00 00       	nop
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 1b0:	63 e0       	ldi	r22, 0x03	; 3
 1b2:	87 e5       	ldi	r24, 0x57	; 87
 1b4:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 1b8:	64 e0       	ldi	r22, 0x04	; 4
 1ba:	85 e4       	ldi	r24, 0x45	; 69
 1bc:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	84 e3       	ldi	r24, 0x34	; 52
 1c4:	9c e0       	ldi	r25, 0x0C	; 12
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <WelcomeMessage+0x78>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <WelcomeMessage+0x82>
 1d0:	00 00       	nop
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	87 e5       	ldi	r24, 0x57	; 87
 1e6:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 1ea:	63 e0       	ldi	r22, 0x03	; 3
 1ec:	85 e4       	ldi	r24, 0x45	; 69
 1ee:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 1f2:	64 e0       	ldi	r22, 0x04	; 4
 1f4:	8c e4       	ldi	r24, 0x4C	; 76
 1f6:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	84 e3       	ldi	r24, 0x34	; 52
 1fe:	9c e0       	ldi	r25, 0x0C	; 12
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <__EEPROM_REGION_LENGTH__>
 208:	00 c0       	rjmp	.+0      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 20a:	00 00       	nop
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	87 e5       	ldi	r24, 0x57	; 87
 218:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 21c:	62 e0       	ldi	r22, 0x02	; 2
 21e:	85 e4       	ldi	r24, 0x45	; 69
 220:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 224:	63 e0       	ldi	r22, 0x03	; 3
 226:	8c e4       	ldi	r24, 0x4C	; 76
 228:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 22c:	64 e0       	ldi	r22, 0x04	; 4
 22e:	83 e4       	ldi	r24, 0x43	; 67
 230:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 234:	2f ef       	ldi	r18, 0xFF	; 255
 236:	84 e3       	ldi	r24, 0x34	; 52
 238:	9c e0       	ldi	r25, 0x0C	; 12
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 242:	00 c0       	rjmp	.+0      	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
 244:	00 00       	nop
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	87 e5       	ldi	r24, 0x57	; 87
 24a:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	85 e4       	ldi	r24, 0x45	; 69
 252:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	8c e4       	ldi	r24, 0x4C	; 76
 25a:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 25e:	63 e0       	ldi	r22, 0x03	; 3
 260:	83 e4       	ldi	r24, 0x43	; 67
 262:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 266:	64 e0       	ldi	r22, 0x04	; 4
 268:	8f e4       	ldi	r24, 0x4F	; 79
 26a:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	84 e3       	ldi	r24, 0x34	; 52
 272:	9c e0       	ldi	r25, 0x0C	; 12
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
 27e:	00 00       	nop
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	85 e4       	ldi	r24, 0x45	; 69
 284:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	8c e4       	ldi	r24, 0x4C	; 76
 28c:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	83 e4       	ldi	r24, 0x43	; 67
 294:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 298:	63 e0       	ldi	r22, 0x03	; 3
 29a:	8f e4       	ldi	r24, 0x4F	; 79
 29c:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 2a0:	64 e0       	ldi	r22, 0x04	; 4
 2a2:	8d e4       	ldi	r24, 0x4D	; 77
 2a4:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	84 e3       	ldi	r24, 0x34	; 52
 2ac:	9c e0       	ldi	r25, 0x0C	; 12
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <__EEPROM_REGION_LENGTH__+0xb8>
 2b8:	00 00       	nop
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	8c e4       	ldi	r24, 0x4C	; 76
 2be:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	83 e4       	ldi	r24, 0x43	; 67
 2c6:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	8f e4       	ldi	r24, 0x4F	; 79
 2ce:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 2d2:	63 e0       	ldi	r22, 0x03	; 3
 2d4:	8d e4       	ldi	r24, 0x4D	; 77
 2d6:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 2da:	64 e0       	ldi	r22, 0x04	; 4
 2dc:	85 e4       	ldi	r24, 0x45	; 69
 2de:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 2e2:	2f ef       	ldi	r18, 0xFF	; 255
 2e4:	84 e3       	ldi	r24, 0x34	; 52
 2e6:	9c e0       	ldi	r25, 0x0C	; 12
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	80 40       	sbci	r24, 0x00	; 0
 2ec:	90 40       	sbci	r25, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <__EEPROM_REGION_LENGTH__+0xe8>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <__EEPROM_REGION_LENGTH__+0xf2>
 2f2:	00 00       	nop
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	83 e4       	ldi	r24, 0x43	; 67
 2f8:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	8f e4       	ldi	r24, 0x4F	; 79
 300:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	8d e4       	ldi	r24, 0x4D	; 77
 308:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 30c:	63 e0       	ldi	r22, 0x03	; 3
 30e:	85 e4       	ldi	r24, 0x45	; 69
 310:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 314:	64 e0       	ldi	r22, 0x04	; 4
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 31c:	2f ef       	ldi	r18, 0xFF	; 255
 31e:	84 e3       	ldi	r24, 0x34	; 52
 320:	9c e0       	ldi	r25, 0x0C	; 12
 322:	21 50       	subi	r18, 0x01	; 1
 324:	80 40       	sbci	r24, 0x00	; 0
 326:	90 40       	sbci	r25, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <__EEPROM_REGION_LENGTH__+0x122>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <__EEPROM_REGION_LENGTH__+0x12c>
 32c:	00 00       	nop
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	8f e4       	ldi	r24, 0x4F	; 79
 332:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	8d e4       	ldi	r24, 0x4D	; 77
 33a:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	85 e4       	ldi	r24, 0x45	; 69
 342:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 346:	63 e0       	ldi	r22, 0x03	; 3
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 34e:	64 e0       	ldi	r22, 0x04	; 4
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	84 e3       	ldi	r24, 0x34	; 52
 35a:	9c e0       	ldi	r25, 0x0C	; 12
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <__EEPROM_REGION_LENGTH__+0x15c>
 364:	00 c0       	rjmp	.+0      	; 0x366 <__EEPROM_REGION_LENGTH__+0x166>
 366:	00 00       	nop
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	8d e4       	ldi	r24, 0x4D	; 77
 36c:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	85 e4       	ldi	r24, 0x45	; 69
 374:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 378:	62 e0       	ldi	r22, 0x02	; 2
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 380:	63 e0       	ldi	r22, 0x03	; 3
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 388:	64 e0       	ldi	r22, 0x04	; 4
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 390:	2f ef       	ldi	r18, 0xFF	; 255
 392:	84 e3       	ldi	r24, 0x34	; 52
 394:	9c e0       	ldi	r25, 0x0C	; 12
 396:	21 50       	subi	r18, 0x01	; 1
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	90 40       	sbci	r25, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <__EEPROM_REGION_LENGTH__+0x196>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <__EEPROM_REGION_LENGTH__+0x1a0>
 3a0:	00 00       	nop
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	85 e4       	ldi	r24, 0x45	; 69
 3a6:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 3b2:	62 e0       	ldi	r22, 0x02	; 2
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 3ba:	63 e0       	ldi	r22, 0x03	; 3
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 3c2:	64 e0       	ldi	r22, 0x04	; 4
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 3ca:	2f ef       	ldi	r18, 0xFF	; 255
 3cc:	84 e3       	ldi	r24, 0x34	; 52
 3ce:	9c e0       	ldi	r25, 0x0C	; 12
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	80 40       	sbci	r24, 0x00	; 0
 3d4:	90 40       	sbci	r25, 0x00	; 0
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <__EEPROM_REGION_LENGTH__+0x1d0>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <__EEPROM_REGION_LENGTH__+0x1da>
 3da:	00 00       	nop
 3dc:	21 96       	adiw	r28, 0x01	; 1
 3de:	c1 30       	cpi	r28, 0x01	; 1
 3e0:	d1 05       	cpc	r29, r1
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <__EEPROM_REGION_LENGTH__+0x1e6>
 3e4:	b9 ce       	rjmp	.-654    	; 0x158 <WelcomeMessage+0xa>
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <PressToStart>:
 3ec:	ef 92       	push	r14
 3ee:	ff 92       	push	r15
 3f0:	0f 93       	push	r16
 3f2:	1f 93       	push	r17
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
 3fc:	ae 97       	sbiw	r28, 0x2e	; 46
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	f8 94       	cli
 402:	de bf       	out	0x3e, r29	; 62
 404:	0f be       	out	0x3f, r0	; 63
 406:	cd bf       	out	0x3d, r28	; 61
 408:	78 94       	sei
 40a:	8e e2       	ldi	r24, 0x2E	; 46
 40c:	e9 e7       	ldi	r30, 0x79	; 121
 40e:	f1 e0       	ldi	r31, 0x01	; 1
 410:	de 01       	movw	r26, r28
 412:	11 96       	adiw	r26, 0x01	; 1
 414:	01 90       	ld	r0, Z+
 416:	0d 92       	st	X+, r0
 418:	8a 95       	dec	r24
 41a:	e1 f7       	brne	.-8      	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <otherBoolFlag>
 422:	5c c0       	rjmp	.+184    	; 0x4dc <__DATA_REGION_LENGTH__+0xdc>
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_AllSegments>
 42a:	e1 e0       	ldi	r30, 0x01	; 1
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	ec 0f       	add	r30, r28
 430:	fd 1f       	adc	r31, r29
 432:	e0 0f       	add	r30, r16
 434:	f1 1f       	adc	r31, r17
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 43e:	78 01       	movw	r14, r16
 440:	2f ef       	ldi	r18, 0xFF	; 255
 442:	e2 1a       	sub	r14, r18
 444:	f2 0a       	sbc	r15, r18
 446:	e1 e0       	ldi	r30, 0x01	; 1
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	ec 0f       	add	r30, r28
 44c:	fd 1f       	adc	r31, r29
 44e:	ee 0d       	add	r30, r14
 450:	ff 1d       	adc	r31, r15
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	80 81       	ld	r24, Z
 456:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 45a:	f8 01       	movw	r30, r16
 45c:	32 96       	adiw	r30, 0x02	; 2
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	8c 0f       	add	r24, r28
 464:	9d 1f       	adc	r25, r29
 466:	e8 0f       	add	r30, r24
 468:	f9 1f       	adc	r31, r25
 46a:	62 e0       	ldi	r22, 0x02	; 2
 46c:	80 81       	ld	r24, Z
 46e:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 472:	f8 01       	movw	r30, r16
 474:	33 96       	adiw	r30, 0x03	; 3
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	8c 0f       	add	r24, r28
 47c:	9d 1f       	adc	r25, r29
 47e:	e8 0f       	add	r30, r24
 480:	f9 1f       	adc	r31, r25
 482:	63 e0       	ldi	r22, 0x03	; 3
 484:	80 81       	ld	r24, Z
 486:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 48a:	f8 01       	movw	r30, r16
 48c:	34 96       	adiw	r30, 0x04	; 4
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	8c 0f       	add	r24, r28
 494:	9d 1f       	adc	r25, r29
 496:	e8 0f       	add	r30, r24
 498:	f9 1f       	adc	r31, r25
 49a:	64 e0       	ldi	r22, 0x04	; 4
 49c:	80 81       	ld	r24, Z
 49e:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 4a2:	0b 5f       	subi	r16, 0xFB	; 251
 4a4:	1f 4f       	sbci	r17, 0xFF	; 255
 4a6:	e1 e0       	ldi	r30, 0x01	; 1
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	ec 0f       	add	r30, r28
 4ac:	fd 1f       	adc	r31, r29
 4ae:	e0 0f       	add	r30, r16
 4b0:	f1 1f       	adc	r31, r17
 4b2:	65 e0       	ldi	r22, 0x05	; 5
 4b4:	80 81       	ld	r24, Z
 4b6:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 4ba:	9f ef       	ldi	r25, 0xFF	; 255
 4bc:	24 e3       	ldi	r18, 0x34	; 52
 4be:	8c e0       	ldi	r24, 0x0C	; 12
 4c0:	91 50       	subi	r25, 0x01	; 1
 4c2:	20 40       	sbci	r18, 0x00	; 0
 4c4:	80 40       	sbci	r24, 0x00	; 0
 4c6:	e1 f7       	brne	.-8      	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <__DATA_REGION_LENGTH__+0xca>
 4ca:	00 00       	nop
 4cc:	87 01       	movw	r16, r14
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <__DATA_REGION_LENGTH__+0xd4>
 4d0:	00 e0       	ldi	r16, 0x00	; 0
 4d2:	10 e0       	ldi	r17, 0x00	; 0
 4d4:	0d 32       	cpi	r16, 0x2D	; 45
 4d6:	11 05       	cpc	r17, r1
 4d8:	09 f0       	breq	.+2      	; 0x4dc <__DATA_REGION_LENGTH__+0xdc>
 4da:	a4 cf       	rjmp	.-184    	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 4dc:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otherBoolFlag>
 4e0:	81 11       	cpse	r24, r1
 4e2:	f6 cf       	rjmp	.-20     	; 0x4d0 <__DATA_REGION_LENGTH__+0xd0>
 4e4:	f8 94       	cli
 4e6:	ae 96       	adiw	r28, 0x2e	; 46
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	0f 91       	pop	r16
 4fa:	ff 90       	pop	r15
 4fc:	ef 90       	pop	r14
 4fe:	08 95       	ret

00000500 <PressToQuit>:
 500:	ef 92       	push	r14
 502:	ff 92       	push	r15
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	c4 56       	subi	r28, 0x64	; 100
 512:	d1 09       	sbc	r29, r1
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	f8 94       	cli
 518:	de bf       	out	0x3e, r29	; 62
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	cd bf       	out	0x3d, r28	; 61
 51e:	78 94       	sei
 520:	8a e5       	ldi	r24, 0x5A	; 90
 522:	ee ea       	ldi	r30, 0xAE	; 174
 524:	f1 e0       	ldi	r31, 0x01	; 1
 526:	de 01       	movw	r26, r28
 528:	11 96       	adiw	r26, 0x01	; 1
 52a:	01 90       	ld	r0, Z+
 52c:	0d 92       	st	X+, r0
 52e:	8a 95       	dec	r24
 530:	e1 f7       	brne	.-8      	; 0x52a <PressToQuit+0x2a>
 532:	fe 01       	movw	r30, r28
 534:	e5 5a       	subi	r30, 0xA5	; 165
 536:	ff 4f       	sbci	r31, 0xFF	; 255
 538:	8a e0       	ldi	r24, 0x0A	; 10
 53a:	df 01       	movw	r26, r30
 53c:	1d 92       	st	X+, r1
 53e:	8a 95       	dec	r24
 540:	e9 f7       	brne	.-6      	; 0x53c <PressToQuit+0x3c>
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <otherBoolFlag>
 548:	5c c0       	rjmp	.+184    	; 0x602 <PressToQuit+0x102>
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_AllSegments>
 550:	e1 e0       	ldi	r30, 0x01	; 1
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	ec 0f       	add	r30, r28
 556:	fd 1f       	adc	r31, r29
 558:	e0 0f       	add	r30, r16
 55a:	f1 1f       	adc	r31, r17
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 564:	78 01       	movw	r14, r16
 566:	bf ef       	ldi	r27, 0xFF	; 255
 568:	eb 1a       	sub	r14, r27
 56a:	fb 0a       	sbc	r15, r27
 56c:	e1 e0       	ldi	r30, 0x01	; 1
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	ec 0f       	add	r30, r28
 572:	fd 1f       	adc	r31, r29
 574:	ee 0d       	add	r30, r14
 576:	ff 1d       	adc	r31, r15
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	80 81       	ld	r24, Z
 57c:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 580:	f8 01       	movw	r30, r16
 582:	32 96       	adiw	r30, 0x02	; 2
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	8c 0f       	add	r24, r28
 58a:	9d 1f       	adc	r25, r29
 58c:	e8 0f       	add	r30, r24
 58e:	f9 1f       	adc	r31, r25
 590:	62 e0       	ldi	r22, 0x02	; 2
 592:	80 81       	ld	r24, Z
 594:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 598:	f8 01       	movw	r30, r16
 59a:	33 96       	adiw	r30, 0x03	; 3
 59c:	a1 e0       	ldi	r26, 0x01	; 1
 59e:	b0 e0       	ldi	r27, 0x00	; 0
 5a0:	ac 0f       	add	r26, r28
 5a2:	bd 1f       	adc	r27, r29
 5a4:	ea 0f       	add	r30, r26
 5a6:	fb 1f       	adc	r31, r27
 5a8:	63 e0       	ldi	r22, 0x03	; 3
 5aa:	80 81       	ld	r24, Z
 5ac:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 5b0:	f8 01       	movw	r30, r16
 5b2:	34 96       	adiw	r30, 0x04	; 4
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	8c 0f       	add	r24, r28
 5ba:	9d 1f       	adc	r25, r29
 5bc:	e8 0f       	add	r30, r24
 5be:	f9 1f       	adc	r31, r25
 5c0:	64 e0       	ldi	r22, 0x04	; 4
 5c2:	80 81       	ld	r24, Z
 5c4:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 5c8:	0b 5f       	subi	r16, 0xFB	; 251
 5ca:	1f 4f       	sbci	r17, 0xFF	; 255
 5cc:	e1 e0       	ldi	r30, 0x01	; 1
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	ec 0f       	add	r30, r28
 5d2:	fd 1f       	adc	r31, r29
 5d4:	e0 0f       	add	r30, r16
 5d6:	f1 1f       	adc	r31, r17
 5d8:	65 e0       	ldi	r22, 0x05	; 5
 5da:	80 81       	ld	r24, Z
 5dc:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 5e0:	9f ef       	ldi	r25, 0xFF	; 255
 5e2:	a4 e3       	ldi	r26, 0x34	; 52
 5e4:	bc e0       	ldi	r27, 0x0C	; 12
 5e6:	91 50       	subi	r25, 0x01	; 1
 5e8:	a0 40       	sbci	r26, 0x00	; 0
 5ea:	b0 40       	sbci	r27, 0x00	; 0
 5ec:	e1 f7       	brne	.-8      	; 0x5e6 <PressToQuit+0xe6>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <PressToQuit+0xf0>
 5f0:	00 00       	nop
 5f2:	87 01       	movw	r16, r14
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <PressToQuit+0xfa>
 5f6:	00 e0       	ldi	r16, 0x00	; 0
 5f8:	10 e0       	ldi	r17, 0x00	; 0
 5fa:	03 35       	cpi	r16, 0x53	; 83
 5fc:	11 05       	cpc	r17, r1
 5fe:	09 f0       	breq	.+2      	; 0x602 <PressToQuit+0x102>
 600:	a4 cf       	rjmp	.-184    	; 0x54a <PressToQuit+0x4a>
 602:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otherBoolFlag>
 606:	81 11       	cpse	r24, r1
 608:	f6 cf       	rjmp	.-20     	; 0x5f6 <PressToQuit+0xf6>
 60a:	f8 94       	cli
 60c:	cc 59       	subi	r28, 0x9C	; 156
 60e:	df 4f       	sbci	r29, 0xFF	; 255
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	f8 94       	cli
 614:	de bf       	out	0x3e, r29	; 62
 616:	0f be       	out	0x3f, r0	; 63
 618:	cd bf       	out	0x3d, r28	; 61
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	1f 91       	pop	r17
 620:	0f 91       	pop	r16
 622:	ff 90       	pop	r15
 624:	ef 90       	pop	r14
 626:	08 95       	ret

00000628 <Lockpicking>:
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <otherBoolFlag>
 632:	86 c0       	rjmp	.+268    	; 0x740 <Lockpicking+0x118>
 634:	8b b1       	in	r24, 0x0b	; 11
 636:	82 60       	ori	r24, 0x02	; 2
 638:	8b b9       	out	0x0b, r24	; 11
 63a:	2f ef       	ldi	r18, 0xFF	; 255
 63c:	49 e6       	ldi	r20, 0x69	; 105
 63e:	88 e1       	ldi	r24, 0x18	; 24
 640:	21 50       	subi	r18, 0x01	; 1
 642:	40 40       	sbci	r20, 0x00	; 0
 644:	80 40       	sbci	r24, 0x00	; 0
 646:	e1 f7       	brne	.-8      	; 0x640 <Lockpicking+0x18>
 648:	00 c0       	rjmp	.+0      	; 0x64a <Lockpicking+0x22>
 64a:	00 00       	nop
 64c:	8b b1       	in	r24, 0x0b	; 11
 64e:	8d 7f       	andi	r24, 0xFD	; 253
 650:	8b b9       	out	0x0b, r24	; 11
 652:	9f ef       	ldi	r25, 0xFF	; 255
 654:	29 e6       	ldi	r18, 0x69	; 105
 656:	48 e1       	ldi	r20, 0x18	; 24
 658:	91 50       	subi	r25, 0x01	; 1
 65a:	20 40       	sbci	r18, 0x00	; 0
 65c:	40 40       	sbci	r20, 0x00	; 0
 65e:	e1 f7       	brne	.-8      	; 0x658 <Lockpicking+0x30>
 660:	00 c0       	rjmp	.+0      	; 0x662 <Lockpicking+0x3a>
 662:	00 00       	nop
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_AllSegments>
 66a:	60 e0       	ldi	r22, 0x00	; 0
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 672:	61 e0       	ldi	r22, 0x01	; 1
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 67a:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__data_end>
 67e:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__data_end+0x1>
 682:	22 0f       	add	r18, r18
 684:	33 1f       	adc	r19, r19
 686:	22 0f       	add	r18, r18
 688:	33 1f       	adc	r19, r19
 68a:	22 0f       	add	r18, r18
 68c:	33 1f       	adc	r19, r19
 68e:	c9 01       	movw	r24, r18
 690:	64 e6       	ldi	r22, 0x64	; 100
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__divmodhi4>
 698:	46 2f       	mov	r20, r22
 69a:	ea e0       	ldi	r30, 0x0A	; 10
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	bf 01       	movw	r22, r30
 6a0:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__divmodhi4>
 6a4:	d6 2f       	mov	r29, r22
 6a6:	c9 01       	movw	r24, r18
 6a8:	bf 01       	movw	r22, r30
 6aa:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__divmodhi4>
 6ae:	c8 2f       	mov	r28, r24
 6b0:	62 e0       	ldi	r22, 0x02	; 2
 6b2:	80 e3       	ldi	r24, 0x30	; 48
 6b4:	84 0f       	add	r24, r20
 6b6:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 6ba:	63 e0       	ldi	r22, 0x03	; 3
 6bc:	80 e3       	ldi	r24, 0x30	; 48
 6be:	8d 0f       	add	r24, r29
 6c0:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 6c4:	64 e0       	ldi	r22, 0x04	; 4
 6c6:	80 e3       	ldi	r24, 0x30	; 48
 6c8:	8c 0f       	add	r24, r28
 6ca:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 6ce:	8f ef       	ldi	r24, 0xFF	; 255
 6d0:	94 e3       	ldi	r25, 0x34	; 52
 6d2:	2c e0       	ldi	r18, 0x0C	; 12
 6d4:	81 50       	subi	r24, 0x01	; 1
 6d6:	90 40       	sbci	r25, 0x00	; 0
 6d8:	20 40       	sbci	r18, 0x00	; 0
 6da:	e1 f7       	brne	.-8      	; 0x6d4 <Lockpicking+0xac>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <Lockpicking+0xb6>
 6de:	00 00       	nop
 6e0:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <myLock>
 6e4:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <myLock+0x1>
 6e8:	80 81       	ld	r24, Z
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__data_end>
 6f0:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__data_end+0x1>
 6f4:	82 17       	cp	r24, r18
 6f6:	93 07       	cpc	r25, r19
 6f8:	19 f5       	brne	.+70     	; 0x740 <Lockpicking+0x118>
 6fa:	84 b1       	in	r24, 0x04	; 4
 6fc:	81 60       	ori	r24, 0x01	; 1
 6fe:	84 b9       	out	0x04, r24	; 4
 700:	20 e0       	ldi	r18, 0x00	; 0
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	1a c0       	rjmp	.+52     	; 0x73a <Lockpicking+0x112>
 706:	85 b1       	in	r24, 0x05	; 5
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	85 b9       	out	0x05, r24	; 5
 70c:	4f ef       	ldi	r20, 0xFF	; 255
 70e:	80 e7       	ldi	r24, 0x70	; 112
 710:	92 e0       	ldi	r25, 0x02	; 2
 712:	41 50       	subi	r20, 0x01	; 1
 714:	80 40       	sbci	r24, 0x00	; 0
 716:	90 40       	sbci	r25, 0x00	; 0
 718:	e1 f7       	brne	.-8      	; 0x712 <Lockpicking+0xea>
 71a:	00 c0       	rjmp	.+0      	; 0x71c <Lockpicking+0xf4>
 71c:	00 00       	nop
 71e:	85 b1       	in	r24, 0x05	; 5
 720:	8e 7f       	andi	r24, 0xFE	; 254
 722:	85 b9       	out	0x05, r24	; 5
 724:	4f ef       	ldi	r20, 0xFF	; 255
 726:	80 e7       	ldi	r24, 0x70	; 112
 728:	92 e0       	ldi	r25, 0x02	; 2
 72a:	41 50       	subi	r20, 0x01	; 1
 72c:	80 40       	sbci	r24, 0x00	; 0
 72e:	90 40       	sbci	r25, 0x00	; 0
 730:	e1 f7       	brne	.-8      	; 0x72a <Lockpicking+0x102>
 732:	00 c0       	rjmp	.+0      	; 0x734 <Lockpicking+0x10c>
 734:	00 00       	nop
 736:	2f 5f       	subi	r18, 0xFF	; 255
 738:	3f 4f       	sbci	r19, 0xFF	; 255
 73a:	27 30       	cpi	r18, 0x07	; 7
 73c:	31 05       	cpc	r19, r1
 73e:	19 f7       	brne	.-58     	; 0x706 <Lockpicking+0xde>
 740:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otherBoolFlag>
 744:	81 11       	cpse	r24, r1
 746:	76 cf       	rjmp	.-276    	; 0x634 <Lockpicking+0xc>
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	08 95       	ret

0000074e <EndRoutine>:
 74e:	0f 93       	push	r16
 750:	1f 93       	push	r17
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <myLock>
 75a:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <myLock+0x1>
 75e:	fc 01       	movw	r30, r24
 760:	c2 81       	ldd	r28, Z+2	; 0x02
 762:	d3 81       	ldd	r29, Z+3	; 0x03
 764:	0e 94 ac 06 	call	0xd58	; 0xd58 <free>
 768:	d0 93 15 02 	sts	0x0215, r29	; 0x800215 <myLock+0x1>
 76c:	c0 93 14 02 	sts	0x0214, r28	; 0x800214 <myLock>
 770:	0a 81       	ldd	r16, Y+2	; 0x02
 772:	1b 81       	ldd	r17, Y+3	; 0x03
 774:	ce 01       	movw	r24, r28
 776:	0e 94 ac 06 	call	0xd58	; 0xd58 <free>
 77a:	10 93 15 02 	sts	0x0215, r17	; 0x800215 <myLock+0x1>
 77e:	00 93 14 02 	sts	0x0214, r16	; 0x800214 <myLock>
 782:	c8 01       	movw	r24, r16
 784:	0e 94 ac 06 	call	0xd58	; 0xd58 <free>
 788:	20 e0       	ldi	r18, 0x00	; 0
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	15 c0       	rjmp	.+42     	; 0x7b8 <EndRoutine+0x6a>
 78e:	85 b1       	in	r24, 0x05	; 5
 790:	82 60       	ori	r24, 0x02	; 2
 792:	85 b9       	out	0x05, r24	; 5
 794:	8f e6       	ldi	r24, 0x6F	; 111
 796:	97 e1       	ldi	r25, 0x17	; 23
 798:	01 97       	sbiw	r24, 0x01	; 1
 79a:	f1 f7       	brne	.-4      	; 0x798 <EndRoutine+0x4a>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <EndRoutine+0x50>
 79e:	00 00       	nop
 7a0:	95 b1       	in	r25, 0x05	; 5
 7a2:	82 e0       	ldi	r24, 0x02	; 2
 7a4:	89 27       	eor	r24, r25
 7a6:	85 b9       	out	0x05, r24	; 5
 7a8:	ef e2       	ldi	r30, 0x2F	; 47
 7aa:	f5 e7       	ldi	r31, 0x75	; 117
 7ac:	31 97       	sbiw	r30, 0x01	; 1
 7ae:	f1 f7       	brne	.-4      	; 0x7ac <EndRoutine+0x5e>
 7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <EndRoutine+0x64>
 7b2:	00 00       	nop
 7b4:	2f 5f       	subi	r18, 0xFF	; 255
 7b6:	3f 4f       	sbci	r19, 0xFF	; 255
 7b8:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 7bc:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 7c0:	28 17       	cp	r18, r24
 7c2:	39 07       	cpc	r19, r25
 7c4:	21 f7       	brne	.-56     	; 0x78e <EndRoutine+0x40>
 7c6:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <__data_end+0x1>
 7ca:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
 7ce:	df 91       	pop	r29
 7d0:	cf 91       	pop	r28
 7d2:	1f 91       	pop	r17
 7d4:	0f 91       	pop	r16
 7d6:	08 95       	ret

000007d8 <SetupInterrupts>:
 7d8:	ec e6       	ldi	r30, 0x6C	; 108
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	80 61       	ori	r24, 0x10	; 16
 7e0:	80 83       	st	Z, r24
 7e2:	80 81       	ld	r24, Z
 7e4:	80 64       	ori	r24, 0x40	; 64
 7e6:	80 83       	st	Z, r24
 7e8:	80 81       	ld	r24, Z
 7ea:	80 68       	ori	r24, 0x80	; 128
 7ec:	80 83       	st	Z, r24
 7ee:	80 ec       	ldi	r24, 0xC0	; 192
 7f0:	8d bb       	out	0x1d, r24	; 29
 7f2:	08 95       	ret

000007f4 <showUP>:


//LCD functions
void showUP()
{
	LCD_AllSegments(FALSE);
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_AllSegments>
	LCD_WriteDigit('U', 0);
 7fa:	60 e0       	ldi	r22, 0x00	; 0
 7fc:	85 e5       	ldi	r24, 0x55	; 85
 7fe:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('P', 1);
 802:	61 e0       	ldi	r22, 0x01	; 1
 804:	80 e5       	ldi	r24, 0x50	; 80
 806:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 80a:	2f ef       	ldi	r18, 0xFF	; 255
 80c:	81 ee       	ldi	r24, 0xE1	; 225
 80e:	94 e0       	ldi	r25, 0x04	; 4
 810:	21 50       	subi	r18, 0x01	; 1
 812:	80 40       	sbci	r24, 0x00	; 0
 814:	90 40       	sbci	r25, 0x00	; 0
 816:	e1 f7       	brne	.-8      	; 0x810 <showUP+0x1c>
 818:	00 c0       	rjmp	.+0      	; 0x81a <showUP+0x26>
 81a:	00 00       	nop
 81c:	08 95       	ret

0000081e <showDOWN>:
	return;
}

void showDOWN()
{
	LCD_AllSegments(FALSE);
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_AllSegments>
	LCD_WriteDigit('D', 0);
 824:	60 e0       	ldi	r22, 0x00	; 0
 826:	84 e4       	ldi	r24, 0x44	; 68
 828:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('O', 1);
 82c:	61 e0       	ldi	r22, 0x01	; 1
 82e:	8f e4       	ldi	r24, 0x4F	; 79
 830:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('W', 2);
 834:	62 e0       	ldi	r22, 0x02	; 2
 836:	87 e5       	ldi	r24, 0x57	; 87
 838:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('N', 3);
 83c:	63 e0       	ldi	r22, 0x03	; 3
 83e:	8e e4       	ldi	r24, 0x4E	; 78
 840:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 844:	2f ef       	ldi	r18, 0xFF	; 255
 846:	81 ee       	ldi	r24, 0xE1	; 225
 848:	94 e0       	ldi	r25, 0x04	; 4
 84a:	21 50       	subi	r18, 0x01	; 1
 84c:	80 40       	sbci	r24, 0x00	; 0
 84e:	90 40       	sbci	r25, 0x00	; 0
 850:	e1 f7       	brne	.-8      	; 0x84a <showDOWN+0x2c>
 852:	00 c0       	rjmp	.+0      	; 0x854 <showDOWN+0x36>
 854:	00 00       	nop
 856:	08 95       	ret

00000858 <showRIGHT>:
	return;
}

void showRIGHT()
{
	LCD_AllSegments(FALSE);
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_AllSegments>
	LCD_WriteDigit('R', 0);
 85e:	60 e0       	ldi	r22, 0x00	; 0
 860:	82 e5       	ldi	r24, 0x52	; 82
 862:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('I', 1);
 866:	61 e0       	ldi	r22, 0x01	; 1
 868:	89 e4       	ldi	r24, 0x49	; 73
 86a:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('G', 2);
 86e:	62 e0       	ldi	r22, 0x02	; 2
 870:	87 e4       	ldi	r24, 0x47	; 71
 872:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('H', 3);
 876:	63 e0       	ldi	r22, 0x03	; 3
 878:	88 e4       	ldi	r24, 0x48	; 72
 87a:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('T', 4);
 87e:	64 e0       	ldi	r22, 0x04	; 4
 880:	84 e5       	ldi	r24, 0x54	; 84
 882:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 886:	2f ef       	ldi	r18, 0xFF	; 255
 888:	81 ee       	ldi	r24, 0xE1	; 225
 88a:	94 e0       	ldi	r25, 0x04	; 4
 88c:	21 50       	subi	r18, 0x01	; 1
 88e:	80 40       	sbci	r24, 0x00	; 0
 890:	90 40       	sbci	r25, 0x00	; 0
 892:	e1 f7       	brne	.-8      	; 0x88c <showRIGHT+0x34>
 894:	00 c0       	rjmp	.+0      	; 0x896 <showRIGHT+0x3e>
 896:	00 00       	nop
 898:	08 95       	ret

0000089a <showLEFT>:
	return;
}

void showLEFT()
{
	LCD_AllSegments(FALSE);
 89a:	80 e0       	ldi	r24, 0x00	; 0
 89c:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_AllSegments>
	LCD_WriteDigit('L', 0);
 8a0:	60 e0       	ldi	r22, 0x00	; 0
 8a2:	8c e4       	ldi	r24, 0x4C	; 76
 8a4:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('E', 1);
 8a8:	61 e0       	ldi	r22, 0x01	; 1
 8aa:	85 e4       	ldi	r24, 0x45	; 69
 8ac:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('F', 2);
 8b0:	62 e0       	ldi	r22, 0x02	; 2
 8b2:	86 e4       	ldi	r24, 0x46	; 70
 8b4:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('T', 3);
 8b8:	63 e0       	ldi	r22, 0x03	; 3
 8ba:	84 e5       	ldi	r24, 0x54	; 84
 8bc:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 8c0:	2f ef       	ldi	r18, 0xFF	; 255
 8c2:	81 ee       	ldi	r24, 0xE1	; 225
 8c4:	94 e0       	ldi	r25, 0x04	; 4
 8c6:	21 50       	subi	r18, 0x01	; 1
 8c8:	80 40       	sbci	r24, 0x00	; 0
 8ca:	90 40       	sbci	r25, 0x00	; 0
 8cc:	e1 f7       	brne	.-8      	; 0x8c6 <showLEFT+0x2c>
 8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <showLEFT+0x36>
 8d0:	00 00       	nop
 8d2:	08 95       	ret

000008d4 <showCENTER>:
	return;
}

void showCENTER()
{
	LCD_AllSegments(FALSE);
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_AllSegments>
	LCD_WriteDigit('C', 0);
 8da:	60 e0       	ldi	r22, 0x00	; 0
 8dc:	83 e4       	ldi	r24, 0x43	; 67
 8de:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('E', 1);
 8e2:	61 e0       	ldi	r22, 0x01	; 1
 8e4:	85 e4       	ldi	r24, 0x45	; 69
 8e6:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('N', 2);
 8ea:	62 e0       	ldi	r22, 0x02	; 2
 8ec:	8e e4       	ldi	r24, 0x4E	; 78
 8ee:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('T', 3);
 8f2:	63 e0       	ldi	r22, 0x03	; 3
 8f4:	84 e5       	ldi	r24, 0x54	; 84
 8f6:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('E', 4);
 8fa:	64 e0       	ldi	r22, 0x04	; 4
 8fc:	85 e4       	ldi	r24, 0x45	; 69
 8fe:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
	LCD_WriteDigit('R', 5);
 902:	65 e0       	ldi	r22, 0x05	; 5
 904:	82 e5       	ldi	r24, 0x52	; 82
 906:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 90a:	2f ef       	ldi	r18, 0xFF	; 255
 90c:	81 ee       	ldi	r24, 0xE1	; 225
 90e:	94 e0       	ldi	r25, 0x04	; 4
 910:	21 50       	subi	r18, 0x01	; 1
 912:	80 40       	sbci	r24, 0x00	; 0
 914:	90 40       	sbci	r25, 0x00	; 0
 916:	e1 f7       	brne	.-8      	; 0x910 <showCENTER+0x3c>
 918:	00 c0       	rjmp	.+0      	; 0x91a <showCENTER+0x46>
 91a:	00 00       	nop
 91c:	08 95       	ret

0000091e <LockMenu>:
	}
	cli();
}

//Fills lock structures in a circular linked list, allows lock selection using right and left switch toggles.
void LockMenu(){
 91e:	0f 93       	push	r16
 920:	1f 93       	push	r17
 922:	cf 93       	push	r28
 924:	df 93       	push	r29
	struct Lock *lockOne, *lockTwo, *lockThree;
	lockOne = (struct Lock*)malloc(sizeof(struct Lock));
 926:	86 e0       	ldi	r24, 0x06	; 6
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	0e 94 14 06 	call	0xc28	; 0xc28 <malloc>
 92e:	ec 01       	movw	r28, r24
	lockOne->m_angle = 7;
 930:	87 e0       	ldi	r24, 0x07	; 7
 932:	88 83       	st	Y, r24
	lockOne->m_number = '1';
 934:	81 e3       	ldi	r24, 0x31	; 49
 936:	89 83       	std	Y+1, r24	; 0x01

	lockTwo = (struct Lock*)malloc(sizeof(struct Lock));
 938:	86 e0       	ldi	r24, 0x06	; 6
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	0e 94 14 06 	call	0xc28	; 0xc28 <malloc>
 940:	8c 01       	movw	r16, r24
	lockTwo->m_angle = 11;
 942:	8b e0       	ldi	r24, 0x0B	; 11
 944:	d8 01       	movw	r26, r16
 946:	8c 93       	st	X, r24
	lockTwo->m_number = '2';
 948:	82 e3       	ldi	r24, 0x32	; 50
 94a:	11 96       	adiw	r26, 0x01	; 1
 94c:	8c 93       	st	X, r24

	lockThree = (struct Lock*)malloc(sizeof(struct Lock));
 94e:	86 e0       	ldi	r24, 0x06	; 6
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	0e 94 14 06 	call	0xc28	; 0xc28 <malloc>
 956:	fc 01       	movw	r30, r24
	lockThree->m_angle = 15;
 958:	8f e0       	ldi	r24, 0x0F	; 15
 95a:	80 83       	st	Z, r24
	lockThree->m_number = '3';
 95c:	83 e3       	ldi	r24, 0x33	; 51
 95e:	81 83       	std	Z+1, r24	; 0x01

	lockOne->rightLock = lockTwo;
 960:	1b 83       	std	Y+3, r17	; 0x03
 962:	0a 83       	std	Y+2, r16	; 0x02
	lockOne->leftLock = lockThree;
 964:	fd 83       	std	Y+5, r31	; 0x05
 966:	ec 83       	std	Y+4, r30	; 0x04

	lockTwo->rightLock = lockThree;
 968:	d8 01       	movw	r26, r16
 96a:	13 96       	adiw	r26, 0x03	; 3
 96c:	fc 93       	st	X, r31
 96e:	ee 93       	st	-X, r30
 970:	12 97       	sbiw	r26, 0x02	; 2
	lockTwo->leftLock = lockOne;
 972:	15 96       	adiw	r26, 0x05	; 5
 974:	dc 93       	st	X, r29
 976:	ce 93       	st	-X, r28
 978:	14 97       	sbiw	r26, 0x04	; 4
	
	lockThree->rightLock = lockOne;
 97a:	d3 83       	std	Z+3, r29	; 0x03
 97c:	c2 83       	std	Z+2, r28	; 0x02
	lockThree->leftLock = lockTwo;
 97e:	15 83       	std	Z+5, r17	; 0x05
 980:	04 83       	std	Z+4, r16	; 0x04

	myLock = lockOne;
 982:	d0 93 15 02 	sts	0x0215, r29	; 0x800215 <myLock+0x1>
 986:	c0 93 14 02 	sts	0x0214, r28	; 0x800214 <myLock>
	static uint8_t p4Prev=1;
	static uint8_t p2Prev=1; //for storing previous value of PE2 to detect
	static uint8_t p3Prev=1; //for storing previous value of PE3 to detect

	//while center button is not 1
	uint8_t boolFlag = 1;
 98a:	c1 e0       	ldi	r28, 0x01	; 1
	while(boolFlag){
 98c:	64 c0       	rjmp	.+200    	; 0xa56 <LockMenu+0x138>
		LCD_AllSegments(FALSE);
 98e:	80 e0       	ldi	r24, 0x00	; 0
 990:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_AllSegments>
		LCD_WriteDigit('L', 0);
 994:	60 e0       	ldi	r22, 0x00	; 0
 996:	8c e4       	ldi	r24, 0x4C	; 76
 998:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
		LCD_WriteDigit('O', 1);
 99c:	61 e0       	ldi	r22, 0x01	; 1
 99e:	8f e4       	ldi	r24, 0x4F	; 79
 9a0:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
		LCD_WriteDigit('C', 2);
 9a4:	62 e0       	ldi	r22, 0x02	; 2
 9a6:	83 e4       	ldi	r24, 0x43	; 67
 9a8:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
		LCD_WriteDigit('K', 3);
 9ac:	63 e0       	ldi	r22, 0x03	; 3
 9ae:	8b e4       	ldi	r24, 0x4B	; 75
 9b0:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
		LCD_WriteDigit(myLock->m_number, 4);
 9b4:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <myLock>
 9b8:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <myLock+0x1>
 9bc:	64 e0       	ldi	r22, 0x04	; 4
 9be:	81 81       	ldd	r24, Z+1	; 0x01
 9c0:	0e 94 6f 00 	call	0xde	; 0xde <LCD_WriteDigit>
 9c4:	bf ef       	ldi	r27, 0xFF	; 255
 9c6:	e4 e3       	ldi	r30, 0x34	; 52
 9c8:	fc e0       	ldi	r31, 0x0C	; 12
 9ca:	b1 50       	subi	r27, 0x01	; 1
 9cc:	e0 40       	sbci	r30, 0x00	; 0
 9ce:	f0 40       	sbci	r31, 0x00	; 0
 9d0:	e1 f7       	brne	.-8      	; 0x9ca <LockMenu+0xac>
 9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <LockMenu+0xb6>
 9d4:	00 00       	nop
		_delay_ms(scrollDelay);
		
		if(((PINB & (1<<4))  == 0) &&
 9d6:	1c 99       	sbic	0x03, 4	; 3
 9d8:	0a c0       	rjmp	.+20     	; 0x9ee <LockMenu+0xd0>
		((p4Prev & (1<<4))  != 0))
 9da:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <p4Prev.2116>
		LCD_WriteDigit('C', 2);
		LCD_WriteDigit('K', 3);
		LCD_WriteDigit(myLock->m_number, 4);
		_delay_ms(scrollDelay);
		
		if(((PINB & (1<<4))  == 0) &&
 9de:	84 fd       	sbrc	r24, 4
 9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <LockMenu+0xca>
 9e2:	05 c0       	rjmp	.+10     	; 0x9ee <LockMenu+0xd0>
		((p4Prev & (1<<4))  != 0))
		{	
			while((PINB & (1<<4)) == 0){
				showCENTER();
 9e4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <showCENTER>
		_delay_ms(scrollDelay);
		
		if(((PINB & (1<<4))  == 0) &&
		((p4Prev & (1<<4))  != 0))
		{	
			while((PINB & (1<<4)) == 0){
 9e8:	1c 9b       	sbis	0x03, 4	; 3
 9ea:	fc cf       	rjmp	.-8      	; 0x9e4 <LockMenu+0xc6>
				showCENTER();
			}
			boolFlag = 0;
 9ec:	c0 e0       	ldi	r28, 0x00	; 0
		}
		//when on LEFT button status being newly pressed, but not when it is released
		if(((PINE & (1<<2))  == 0) &&
 9ee:	62 99       	sbic	0x0c, 2	; 12
 9f0:	14 c0       	rjmp	.+40     	; 0xa1a <LockMenu+0xfc>
		((p2Prev & (1<<2))  != 0))
 9f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <p2Prev.2117>
				showCENTER();
			}
			boolFlag = 0;
		}
		//when on LEFT button status being newly pressed, but not when it is released
		if(((PINE & (1<<2))  == 0) &&
 9f6:	82 fd       	sbrc	r24, 2
 9f8:	03 c0       	rjmp	.+6      	; 0xa00 <LockMenu+0xe2>
 9fa:	0f c0       	rjmp	.+30     	; 0xa1a <LockMenu+0xfc>
		((p2Prev & (1<<2))  != 0))
		{
			while((PINE & (1<<2))  == 0) //while button is pressed
			{
				showLEFT();
 9fc:	0e 94 4d 04 	call	0x89a	; 0x89a <showLEFT>
		}
		//when on LEFT button status being newly pressed, but not when it is released
		if(((PINE & (1<<2))  == 0) &&
		((p2Prev & (1<<2))  != 0))
		{
			while((PINE & (1<<2))  == 0) //while button is pressed
 a00:	62 9b       	sbis	0x0c, 2	; 12
 a02:	fc cf       	rjmp	.-8      	; 0x9fc <LockMenu+0xde>
			{
				showLEFT();
			
			}
			myLock = myLock->leftLock;
 a04:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <myLock>
 a08:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <myLock+0x1>
 a0c:	84 81       	ldd	r24, Z+4	; 0x04
 a0e:	95 81       	ldd	r25, Z+5	; 0x05
 a10:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <myLock+0x1>
 a14:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <myLock>
 a18:	15 c0       	rjmp	.+42     	; 0xa44 <LockMenu+0x126>
		}
		else if(((PINE & (1<<3))  == 0) &&
 a1a:	63 99       	sbic	0x0c, 3	; 12
 a1c:	13 c0       	rjmp	.+38     	; 0xa44 <LockMenu+0x126>
		((p3Prev & (1<<3))  != 0)) //when on RIGHT button status being newly pressed, but not when it is released
 a1e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <p3Prev.2118>
				showLEFT();
			
			}
			myLock = myLock->leftLock;
		}
		else if(((PINE & (1<<3))  == 0) &&
 a22:	83 fd       	sbrc	r24, 3
 a24:	03 c0       	rjmp	.+6      	; 0xa2c <LockMenu+0x10e>
 a26:	0e c0       	rjmp	.+28     	; 0xa44 <LockMenu+0x126>
		((p3Prev & (1<<3))  != 0)) //when on RIGHT button status being newly pressed, but not when it is released
		{
			while((PINE & (1<<3))  == 0) //while button is pressed
			{
				showRIGHT();
 a28:	0e 94 2c 04 	call	0x858	; 0x858 <showRIGHT>
			myLock = myLock->leftLock;
		}
		else if(((PINE & (1<<3))  == 0) &&
		((p3Prev & (1<<3))  != 0)) //when on RIGHT button status being newly pressed, but not when it is released
		{
			while((PINE & (1<<3))  == 0) //while button is pressed
 a2c:	63 9b       	sbis	0x0c, 3	; 12
 a2e:	fc cf       	rjmp	.-8      	; 0xa28 <LockMenu+0x10a>
			{
				showRIGHT();
				//Acts as debounce
			}
			myLock = myLock->rightLock;
 a30:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <myLock>
 a34:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <myLock+0x1>
 a38:	82 81       	ldd	r24, Z+2	; 0x02
 a3a:	93 81       	ldd	r25, Z+3	; 0x03
 a3c:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <myLock+0x1>
 a40:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <myLock>
		}
		else
		{
			//do nothing since I still don't know how we got here
		}
		p4Prev = (PINB);
 a44:	83 b1       	in	r24, 0x03	; 3
 a46:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <p4Prev.2116>

		p2Prev = (PINE); //save LEFT button status
 a4a:	8c b1       	in	r24, 0x0c	; 12
 a4c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <p2Prev.2117>
		p3Prev = (PINE); //save DOWN button status
 a50:	8c b1       	in	r24, 0x0c	; 12
 a52:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <p3Prev.2118>
	static uint8_t p2Prev=1; //for storing previous value of PE2 to detect
	static uint8_t p3Prev=1; //for storing previous value of PE3 to detect

	//while center button is not 1
	uint8_t boolFlag = 1;
	while(boolFlag){
 a56:	c1 11       	cpse	r28, r1
 a58:	9a cf       	rjmp	.-204    	; 0x98e <LockMenu+0x70>
		p4Prev = (PINB);

		p2Prev = (PINE); //save LEFT button status
		p3Prev = (PINE); //save DOWN button status
	}
}
 a5a:	df 91       	pop	r29
 a5c:	cf 91       	pop	r28
 a5e:	1f 91       	pop	r17
 a60:	0f 91       	pop	r16
 a62:	08 95       	ret

00000a64 <main>:
	BootLoaderFixes();
	#endif

	//DDRB |= 1 << 5; //Set PINB5 as output
	//Setup All Pushbuttons
	DDRB |= 1 << PINB1;
 a64:	84 b1       	in	r24, 0x04	; 4
 a66:	82 60       	ori	r24, 0x02	; 2
 a68:	84 b9       	out	0x04, r24	; 4
	//DDRB |= 1 << PINB0; //This is commented out because it messes everything up
	//PORTB &= ~(1<<0); //turns off led
	
	DDRB  &= ~0b11010000;  //set B6,B7, B4 as inputs, B1 is an output
 a6a:	84 b1       	in	r24, 0x04	; 4
 a6c:	8f 72       	andi	r24, 0x2F	; 47
 a6e:	84 b9       	out	0x04, r24	; 4
	DDRE  &= ~0b00001100;  //set E2, E3 to inputs
 a70:	8d b1       	in	r24, 0x0d	; 13
 a72:	83 7f       	andi	r24, 0xF3	; 243
 a74:	8d b9       	out	0x0d, r24	; 13
	PORTB |=  0b11010000;  //enable pull up resistors on B4,B6,B7
 a76:	85 b1       	in	r24, 0x05	; 5
 a78:	80 6d       	ori	r24, 0xD0	; 208
 a7a:	85 b9       	out	0x05, r24	; 5
	PORTE |=  0b00001100;  //enable pull up resistor on pin E2,E3
 a7c:	8e b1       	in	r24, 0x0e	; 14
 a7e:	8c 60       	ori	r24, 0x0C	; 12
 a80:	8e b9       	out	0x0e, r24	; 14
		
	LCD_Init(); //Initialize LCD
 a82:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Init>
	SetupInterrupts();	//setup the interrupts
 a86:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <SetupInterrupts>
	sei();				//enable global interrupts
 a8a:	78 94       	sei
	//cli(); //disables global interrupts

	
    while (1)
    {
		cli();
 a8c:	f8 94       	cli
		WelcomeMessage();
 a8e:	0e 94 a7 00 	call	0x14e	; 0x14e <WelcomeMessage>
		PressToStart();
 a92:	0e 94 f6 01 	call	0x3ec	; 0x3ec <PressToStart>
		PressToQuit();
 a96:	0e 94 80 02 	call	0x500	; 0x500 <PressToQuit>
		LockMenu();
 a9a:	0e 94 8f 04 	call	0x91e	; 0x91e <LockMenu>
		sei();
 a9e:	78 94       	sei
		Lockpicking();
 aa0:	0e 94 14 03 	call	0x628	; 0x628 <Lockpicking>
		EndRoutine();
 aa4:	0e 94 a7 03 	call	0x74e	; 0x74e <EndRoutine>
 aa8:	f1 cf       	rjmp	.-30     	; 0xa8c <main+0x28>

00000aaa <__vector_3>:
	//The following code re-enables them by clearing the appropriate disable bits
	DIDR1 &= ~((1<<AIN0D)|(1<<AIN1D));
}

ISR(PCINT1_vect) 		//remember this is called on pin change 0->1 and 1->0
{
 aaa:	1f 92       	push	r1
 aac:	0f 92       	push	r0
 aae:	0f b6       	in	r0, 0x3f	; 63
 ab0:	0f 92       	push	r0
 ab2:	11 24       	eor	r1, r1
 ab4:	2f 93       	push	r18
 ab6:	3f 93       	push	r19
 ab8:	4f 93       	push	r20
 aba:	5f 93       	push	r21
 abc:	6f 93       	push	r22
 abe:	7f 93       	push	r23
 ac0:	8f 93       	push	r24
 ac2:	9f 93       	push	r25
 ac4:	af 93       	push	r26
 ac6:	bf 93       	push	r27
 ac8:	ef 93       	push	r30
 aca:	ff 93       	push	r31
	static uint8_t p4Prev=1;
	static uint8_t p6Prev=1; //for storing previous value of PB6 to detect
	static uint8_t p7Prev=1; //for storing previous value of PB7 to detect
	
	if(((PINB & (1<<4))  == 0) &&
 acc:	1c 99       	sbic	0x03, 4	; 3
 ace:	0b c0       	rjmp	.+22     	; 0xae6 <__vector_3+0x3c>
	((p4Prev & (1<<4))  != 0)) //when on UP button status being newly pressed, but not when it is released
 ad0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <p4Prev.2166>
{
	static uint8_t p4Prev=1;
	static uint8_t p6Prev=1; //for storing previous value of PB6 to detect
	static uint8_t p7Prev=1; //for storing previous value of PB7 to detect
	
	if(((PINB & (1<<4))  == 0) &&
 ad4:	84 fd       	sbrc	r24, 4
 ad6:	03 c0       	rjmp	.+6      	; 0xade <__vector_3+0x34>
 ad8:	06 c0       	rjmp	.+12     	; 0xae6 <__vector_3+0x3c>
	((p4Prev & (1<<4))  != 0)) //when on UP button status being newly pressed, but not when it is released
	{
		
		while(((PINB & (1<<4))  == 0)) //while button is pressed
		{
			showCENTER();
 ada:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <showCENTER>
	
	if(((PINB & (1<<4))  == 0) &&
	((p4Prev & (1<<4))  != 0)) //when on UP button status being newly pressed, but not when it is released
	{
		
		while(((PINB & (1<<4))  == 0)) //while button is pressed
 ade:	1c 9b       	sbis	0x03, 4	; 3
 ae0:	fc cf       	rjmp	.-8      	; 0xada <__vector_3+0x30>
		{
			showCENTER();
		}
		otherBoolFlag = 0;
 ae2:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <otherBoolFlag>
	
	}

	
	if(((PINB & (1<<6))  == 0) &&
 ae6:	1e 99       	sbic	0x03, 6	; 3
 ae8:	2d c0       	rjmp	.+90     	; 0xb44 <__vector_3+0x9a>
	((p6Prev & (1<<6))  != 0)) //when on UP button status being newly pressed, but not when it is released
 aea:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <p6Prev.2167>
		otherBoolFlag = 0;
	
	}

	
	if(((PINB & (1<<6))  == 0) &&
 aee:	86 ff       	sbrs	r24, 6
 af0:	29 c0       	rjmp	.+82     	; 0xb44 <__vector_3+0x9a>
	((p6Prev & (1<<6))  != 0)) //when on UP button status being newly pressed, but not when it is released
	{
		showUP();
 af2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <showUP>
		if(angle > 0){
 af6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 afa:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 afe:	18 16       	cp	r1, r24
 b00:	19 06       	cpc	r1, r25
 b02:	ec f0       	brlt	.+58     	; 0xb3e <__vector_3+0x94>
 b04:	4f c0       	rjmp	.+158    	; 0xba4 <__vector_3+0xfa>
			while(((PINB & (1<<6))  == 0)) //while button is pressed
			{
				//On time of 1.5ms + Off time of 7.5ms, causes clockwise rotation
				PORTB |= 0b00000010;
 b06:	85 b1       	in	r24, 0x05	; 5
 b08:	82 60       	ori	r24, 0x02	; 2
 b0a:	85 b9       	out	0x05, r24	; 5
 b0c:	8f ed       	ldi	r24, 0xDF	; 223
 b0e:	95 e1       	ldi	r25, 0x15	; 21
 b10:	01 97       	sbiw	r24, 0x01	; 1
 b12:	f1 f7       	brne	.-4      	; 0xb10 <__vector_3+0x66>
 b14:	00 c0       	rjmp	.+0      	; 0xb16 <__vector_3+0x6c>
 b16:	00 00       	nop
				_delay_ms(1.4);
				PORTB ^= 0b00000010; //XORs and ORs are a safe way to change bits in a PORT
 b18:	95 b1       	in	r25, 0x05	; 5
 b1a:	82 e0       	ldi	r24, 0x02	; 2
 b1c:	89 27       	eor	r24, r25
 b1e:	85 b9       	out	0x05, r24	; 5
 b20:	8f e2       	ldi	r24, 0x2F	; 47
 b22:	95 e7       	ldi	r25, 0x75	; 117
 b24:	01 97       	sbiw	r24, 0x01	; 1
 b26:	f1 f7       	brne	.-4      	; 0xb24 <__vector_3+0x7a>
 b28:	00 c0       	rjmp	.+0      	; 0xb2a <__vector_3+0x80>
 b2a:	00 00       	nop
				_delay_ms(7.5);
				angle--;
 b2c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 b30:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 b34:	01 97       	sbiw	r24, 0x01	; 1
 b36:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x1>
 b3a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
	if(((PINB & (1<<6))  == 0) &&
	((p6Prev & (1<<6))  != 0)) //when on UP button status being newly pressed, but not when it is released
	{
		showUP();
		if(angle > 0){
			while(((PINB & (1<<6))  == 0)) //while button is pressed
 b3e:	1e 9b       	sbis	0x03, 6	; 3
 b40:	e2 cf       	rjmp	.-60     	; 0xb06 <__vector_3+0x5c>
 b42:	30 c0       	rjmp	.+96     	; 0xba4 <__vector_3+0xfa>
				_delay_ms(7.5);
				angle--;
			}	
		}
	}
	else if(((PINB & (1<<7))  == 0) &&
 b44:	1f 99       	sbic	0x03, 7	; 3
 b46:	2e c0       	rjmp	.+92     	; 0xba4 <__vector_3+0xfa>
	((p7Prev & (1<<7))  != 0)) //when on DOWN button status being newly pressed, but not when it is released
 b48:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <p7Prev.2168>
				_delay_ms(7.5);
				angle--;
			}	
		}
	}
	else if(((PINB & (1<<7))  == 0) &&
 b4c:	88 23       	and	r24, r24
 b4e:	54 f5       	brge	.+84     	; 0xba4 <__vector_3+0xfa>
	((p7Prev & (1<<7))  != 0)) //when on DOWN button status being newly pressed, but not when it is released
	{
		showDOWN();
 b50:	0e 94 0f 04 	call	0x81e	; 0x81e <showDOWN>
		if(angle < 23){
 b54:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 b58:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 b5c:	47 97       	sbiw	r24, 0x17	; 23
 b5e:	04 f1       	brlt	.+64     	; 0xba0 <__vector_3+0xf6>
 b60:	21 c0       	rjmp	.+66     	; 0xba4 <__vector_3+0xfa>
			while(((PINB & (1<<7))  == 0)) //while button is pressed
			{
				//On time of 2.5ms + Off time of 19ms, causes clockwise rotation
				PORTB |= 0b00000010;
 b62:	85 b1       	in	r24, 0x05	; 5
 b64:	82 60       	ori	r24, 0x02	; 2
 b66:	85 b9       	out	0x05, r24	; 5
 b68:	8f e0       	ldi	r24, 0x0F	; 15
 b6a:	97 e2       	ldi	r25, 0x27	; 39
 b6c:	01 97       	sbiw	r24, 0x01	; 1
 b6e:	f1 f7       	brne	.-4      	; 0xb6c <__vector_3+0xc2>
 b70:	00 c0       	rjmp	.+0      	; 0xb72 <__vector_3+0xc8>
 b72:	00 00       	nop
				_delay_ms(2.5);
				PORTB ^= 0b00000010;
 b74:	95 b1       	in	r25, 0x05	; 5
 b76:	82 e0       	ldi	r24, 0x02	; 2
 b78:	89 27       	eor	r24, r25
 b7a:	85 b9       	out	0x05, r24	; 5
 b7c:	9f e7       	ldi	r25, 0x7F	; 127
 b7e:	2d ee       	ldi	r18, 0xED	; 237
 b80:	80 e0       	ldi	r24, 0x00	; 0
 b82:	91 50       	subi	r25, 0x01	; 1
 b84:	20 40       	sbci	r18, 0x00	; 0
 b86:	80 40       	sbci	r24, 0x00	; 0
 b88:	e1 f7       	brne	.-8      	; 0xb82 <__vector_3+0xd8>
 b8a:	00 c0       	rjmp	.+0      	; 0xb8c <__vector_3+0xe2>
 b8c:	00 00       	nop
				_delay_ms(19);
				angle++;
 b8e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
 b92:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
 b96:	01 96       	adiw	r24, 0x01	; 1
 b98:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x1>
 b9c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
	else if(((PINB & (1<<7))  == 0) &&
	((p7Prev & (1<<7))  != 0)) //when on DOWN button status being newly pressed, but not when it is released
	{
		showDOWN();
		if(angle < 23){
			while(((PINB & (1<<7))  == 0)) //while button is pressed
 ba0:	1f 9b       	sbis	0x03, 7	; 3
 ba2:	df cf       	rjmp	.-66     	; 0xb62 <__vector_3+0xb8>
	}
	else
	{
		//do nothing since I don't know how we got here
	}
	p4Prev = (PINB); //save UP button status
 ba4:	83 b1       	in	r24, 0x03	; 3
 ba6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <p4Prev.2166>
	p6Prev = (PINB); //save UP button status
 baa:	83 b1       	in	r24, 0x03	; 3
 bac:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <p6Prev.2167>
	p7Prev = (PINB); //save DOWN button status
 bb0:	83 b1       	in	r24, 0x03	; 3
 bb2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <p7Prev.2168>
}
 bb6:	ff 91       	pop	r31
 bb8:	ef 91       	pop	r30
 bba:	bf 91       	pop	r27
 bbc:	af 91       	pop	r26
 bbe:	9f 91       	pop	r25
 bc0:	8f 91       	pop	r24
 bc2:	7f 91       	pop	r23
 bc4:	6f 91       	pop	r22
 bc6:	5f 91       	pop	r21
 bc8:	4f 91       	pop	r20
 bca:	3f 91       	pop	r19
 bcc:	2f 91       	pop	r18
 bce:	0f 90       	pop	r0
 bd0:	0f be       	out	0x3f, r0	; 63
 bd2:	0f 90       	pop	r0
 bd4:	1f 90       	pop	r1
 bd6:	18 95       	reti

00000bd8 <__divmodhi4>:
 bd8:	97 fb       	bst	r25, 7
 bda:	07 2e       	mov	r0, r23
 bdc:	16 f4       	brtc	.+4      	; 0xbe2 <__divmodhi4+0xa>
 bde:	00 94       	com	r0
 be0:	07 d0       	rcall	.+14     	; 0xbf0 <__divmodhi4_neg1>
 be2:	77 fd       	sbrc	r23, 7
 be4:	09 d0       	rcall	.+18     	; 0xbf8 <__divmodhi4_neg2>
 be6:	0e 94 00 06 	call	0xc00	; 0xc00 <__udivmodhi4>
 bea:	07 fc       	sbrc	r0, 7
 bec:	05 d0       	rcall	.+10     	; 0xbf8 <__divmodhi4_neg2>
 bee:	3e f4       	brtc	.+14     	; 0xbfe <__divmodhi4_exit>

00000bf0 <__divmodhi4_neg1>:
 bf0:	90 95       	com	r25
 bf2:	81 95       	neg	r24
 bf4:	9f 4f       	sbci	r25, 0xFF	; 255
 bf6:	08 95       	ret

00000bf8 <__divmodhi4_neg2>:
 bf8:	70 95       	com	r23
 bfa:	61 95       	neg	r22
 bfc:	7f 4f       	sbci	r23, 0xFF	; 255

00000bfe <__divmodhi4_exit>:
 bfe:	08 95       	ret

00000c00 <__udivmodhi4>:
 c00:	aa 1b       	sub	r26, r26
 c02:	bb 1b       	sub	r27, r27
 c04:	51 e1       	ldi	r21, 0x11	; 17
 c06:	07 c0       	rjmp	.+14     	; 0xc16 <__udivmodhi4_ep>

00000c08 <__udivmodhi4_loop>:
 c08:	aa 1f       	adc	r26, r26
 c0a:	bb 1f       	adc	r27, r27
 c0c:	a6 17       	cp	r26, r22
 c0e:	b7 07       	cpc	r27, r23
 c10:	10 f0       	brcs	.+4      	; 0xc16 <__udivmodhi4_ep>
 c12:	a6 1b       	sub	r26, r22
 c14:	b7 0b       	sbc	r27, r23

00000c16 <__udivmodhi4_ep>:
 c16:	88 1f       	adc	r24, r24
 c18:	99 1f       	adc	r25, r25
 c1a:	5a 95       	dec	r21
 c1c:	a9 f7       	brne	.-22     	; 0xc08 <__udivmodhi4_loop>
 c1e:	80 95       	com	r24
 c20:	90 95       	com	r25
 c22:	bc 01       	movw	r22, r24
 c24:	cd 01       	movw	r24, r26
 c26:	08 95       	ret

00000c28 <malloc>:
 c28:	0f 93       	push	r16
 c2a:	1f 93       	push	r17
 c2c:	cf 93       	push	r28
 c2e:	df 93       	push	r29
 c30:	82 30       	cpi	r24, 0x02	; 2
 c32:	91 05       	cpc	r25, r1
 c34:	10 f4       	brcc	.+4      	; 0xc3a <malloc+0x12>
 c36:	82 e0       	ldi	r24, 0x02	; 2
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__flp>
 c3e:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__flp+0x1>
 c42:	20 e0       	ldi	r18, 0x00	; 0
 c44:	30 e0       	ldi	r19, 0x00	; 0
 c46:	a0 e0       	ldi	r26, 0x00	; 0
 c48:	b0 e0       	ldi	r27, 0x00	; 0
 c4a:	30 97       	sbiw	r30, 0x00	; 0
 c4c:	19 f1       	breq	.+70     	; 0xc94 <malloc+0x6c>
 c4e:	40 81       	ld	r20, Z
 c50:	51 81       	ldd	r21, Z+1	; 0x01
 c52:	02 81       	ldd	r16, Z+2	; 0x02
 c54:	13 81       	ldd	r17, Z+3	; 0x03
 c56:	48 17       	cp	r20, r24
 c58:	59 07       	cpc	r21, r25
 c5a:	c8 f0       	brcs	.+50     	; 0xc8e <malloc+0x66>
 c5c:	84 17       	cp	r24, r20
 c5e:	95 07       	cpc	r25, r21
 c60:	69 f4       	brne	.+26     	; 0xc7c <malloc+0x54>
 c62:	10 97       	sbiw	r26, 0x00	; 0
 c64:	31 f0       	breq	.+12     	; 0xc72 <malloc+0x4a>
 c66:	12 96       	adiw	r26, 0x02	; 2
 c68:	0c 93       	st	X, r16
 c6a:	12 97       	sbiw	r26, 0x02	; 2
 c6c:	13 96       	adiw	r26, 0x03	; 3
 c6e:	1c 93       	st	X, r17
 c70:	27 c0       	rjmp	.+78     	; 0xcc0 <malloc+0x98>
 c72:	00 93 18 02 	sts	0x0218, r16	; 0x800218 <__flp>
 c76:	10 93 19 02 	sts	0x0219, r17	; 0x800219 <__flp+0x1>
 c7a:	22 c0       	rjmp	.+68     	; 0xcc0 <malloc+0x98>
 c7c:	21 15       	cp	r18, r1
 c7e:	31 05       	cpc	r19, r1
 c80:	19 f0       	breq	.+6      	; 0xc88 <malloc+0x60>
 c82:	42 17       	cp	r20, r18
 c84:	53 07       	cpc	r21, r19
 c86:	18 f4       	brcc	.+6      	; 0xc8e <malloc+0x66>
 c88:	9a 01       	movw	r18, r20
 c8a:	bd 01       	movw	r22, r26
 c8c:	ef 01       	movw	r28, r30
 c8e:	df 01       	movw	r26, r30
 c90:	f8 01       	movw	r30, r16
 c92:	db cf       	rjmp	.-74     	; 0xc4a <malloc+0x22>
 c94:	21 15       	cp	r18, r1
 c96:	31 05       	cpc	r19, r1
 c98:	f9 f0       	breq	.+62     	; 0xcd8 <malloc+0xb0>
 c9a:	28 1b       	sub	r18, r24
 c9c:	39 0b       	sbc	r19, r25
 c9e:	24 30       	cpi	r18, 0x04	; 4
 ca0:	31 05       	cpc	r19, r1
 ca2:	80 f4       	brcc	.+32     	; 0xcc4 <malloc+0x9c>
 ca4:	8a 81       	ldd	r24, Y+2	; 0x02
 ca6:	9b 81       	ldd	r25, Y+3	; 0x03
 ca8:	61 15       	cp	r22, r1
 caa:	71 05       	cpc	r23, r1
 cac:	21 f0       	breq	.+8      	; 0xcb6 <malloc+0x8e>
 cae:	fb 01       	movw	r30, r22
 cb0:	93 83       	std	Z+3, r25	; 0x03
 cb2:	82 83       	std	Z+2, r24	; 0x02
 cb4:	04 c0       	rjmp	.+8      	; 0xcbe <malloc+0x96>
 cb6:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <__flp+0x1>
 cba:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__flp>
 cbe:	fe 01       	movw	r30, r28
 cc0:	32 96       	adiw	r30, 0x02	; 2
 cc2:	44 c0       	rjmp	.+136    	; 0xd4c <malloc+0x124>
 cc4:	fe 01       	movw	r30, r28
 cc6:	e2 0f       	add	r30, r18
 cc8:	f3 1f       	adc	r31, r19
 cca:	81 93       	st	Z+, r24
 ccc:	91 93       	st	Z+, r25
 cce:	22 50       	subi	r18, 0x02	; 2
 cd0:	31 09       	sbc	r19, r1
 cd2:	39 83       	std	Y+1, r19	; 0x01
 cd4:	28 83       	st	Y, r18
 cd6:	3a c0       	rjmp	.+116    	; 0xd4c <malloc+0x124>
 cd8:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <__brkval>
 cdc:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <__brkval+0x1>
 ce0:	23 2b       	or	r18, r19
 ce2:	41 f4       	brne	.+16     	; 0xcf4 <malloc+0xcc>
 ce4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 ce8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 cec:	30 93 17 02 	sts	0x0217, r19	; 0x800217 <__brkval+0x1>
 cf0:	20 93 16 02 	sts	0x0216, r18	; 0x800216 <__brkval>
 cf4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 cf8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 cfc:	21 15       	cp	r18, r1
 cfe:	31 05       	cpc	r19, r1
 d00:	41 f4       	brne	.+16     	; 0xd12 <malloc+0xea>
 d02:	2d b7       	in	r18, 0x3d	; 61
 d04:	3e b7       	in	r19, 0x3e	; 62
 d06:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 d0a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 d0e:	24 1b       	sub	r18, r20
 d10:	35 0b       	sbc	r19, r21
 d12:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <__brkval>
 d16:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <__brkval+0x1>
 d1a:	e2 17       	cp	r30, r18
 d1c:	f3 07       	cpc	r31, r19
 d1e:	a0 f4       	brcc	.+40     	; 0xd48 <malloc+0x120>
 d20:	2e 1b       	sub	r18, r30
 d22:	3f 0b       	sbc	r19, r31
 d24:	28 17       	cp	r18, r24
 d26:	39 07       	cpc	r19, r25
 d28:	78 f0       	brcs	.+30     	; 0xd48 <malloc+0x120>
 d2a:	ac 01       	movw	r20, r24
 d2c:	4e 5f       	subi	r20, 0xFE	; 254
 d2e:	5f 4f       	sbci	r21, 0xFF	; 255
 d30:	24 17       	cp	r18, r20
 d32:	35 07       	cpc	r19, r21
 d34:	48 f0       	brcs	.+18     	; 0xd48 <malloc+0x120>
 d36:	4e 0f       	add	r20, r30
 d38:	5f 1f       	adc	r21, r31
 d3a:	50 93 17 02 	sts	0x0217, r21	; 0x800217 <__brkval+0x1>
 d3e:	40 93 16 02 	sts	0x0216, r20	; 0x800216 <__brkval>
 d42:	81 93       	st	Z+, r24
 d44:	91 93       	st	Z+, r25
 d46:	02 c0       	rjmp	.+4      	; 0xd4c <malloc+0x124>
 d48:	e0 e0       	ldi	r30, 0x00	; 0
 d4a:	f0 e0       	ldi	r31, 0x00	; 0
 d4c:	cf 01       	movw	r24, r30
 d4e:	df 91       	pop	r29
 d50:	cf 91       	pop	r28
 d52:	1f 91       	pop	r17
 d54:	0f 91       	pop	r16
 d56:	08 95       	ret

00000d58 <free>:
 d58:	cf 93       	push	r28
 d5a:	df 93       	push	r29
 d5c:	00 97       	sbiw	r24, 0x00	; 0
 d5e:	09 f4       	brne	.+2      	; 0xd62 <free+0xa>
 d60:	81 c0       	rjmp	.+258    	; 0xe64 <free+0x10c>
 d62:	fc 01       	movw	r30, r24
 d64:	32 97       	sbiw	r30, 0x02	; 2
 d66:	13 82       	std	Z+3, r1	; 0x03
 d68:	12 82       	std	Z+2, r1	; 0x02
 d6a:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <__flp>
 d6e:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <__flp+0x1>
 d72:	10 97       	sbiw	r26, 0x00	; 0
 d74:	81 f4       	brne	.+32     	; 0xd96 <free+0x3e>
 d76:	20 81       	ld	r18, Z
 d78:	31 81       	ldd	r19, Z+1	; 0x01
 d7a:	82 0f       	add	r24, r18
 d7c:	93 1f       	adc	r25, r19
 d7e:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <__brkval>
 d82:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <__brkval+0x1>
 d86:	28 17       	cp	r18, r24
 d88:	39 07       	cpc	r19, r25
 d8a:	51 f5       	brne	.+84     	; 0xde0 <free+0x88>
 d8c:	f0 93 17 02 	sts	0x0217, r31	; 0x800217 <__brkval+0x1>
 d90:	e0 93 16 02 	sts	0x0216, r30	; 0x800216 <__brkval>
 d94:	67 c0       	rjmp	.+206    	; 0xe64 <free+0x10c>
 d96:	ed 01       	movw	r28, r26
 d98:	20 e0       	ldi	r18, 0x00	; 0
 d9a:	30 e0       	ldi	r19, 0x00	; 0
 d9c:	ce 17       	cp	r28, r30
 d9e:	df 07       	cpc	r29, r31
 da0:	40 f4       	brcc	.+16     	; 0xdb2 <free+0x5a>
 da2:	4a 81       	ldd	r20, Y+2	; 0x02
 da4:	5b 81       	ldd	r21, Y+3	; 0x03
 da6:	9e 01       	movw	r18, r28
 da8:	41 15       	cp	r20, r1
 daa:	51 05       	cpc	r21, r1
 dac:	f1 f0       	breq	.+60     	; 0xdea <free+0x92>
 dae:	ea 01       	movw	r28, r20
 db0:	f5 cf       	rjmp	.-22     	; 0xd9c <free+0x44>
 db2:	d3 83       	std	Z+3, r29	; 0x03
 db4:	c2 83       	std	Z+2, r28	; 0x02
 db6:	40 81       	ld	r20, Z
 db8:	51 81       	ldd	r21, Z+1	; 0x01
 dba:	84 0f       	add	r24, r20
 dbc:	95 1f       	adc	r25, r21
 dbe:	c8 17       	cp	r28, r24
 dc0:	d9 07       	cpc	r29, r25
 dc2:	59 f4       	brne	.+22     	; 0xdda <free+0x82>
 dc4:	88 81       	ld	r24, Y
 dc6:	99 81       	ldd	r25, Y+1	; 0x01
 dc8:	84 0f       	add	r24, r20
 dca:	95 1f       	adc	r25, r21
 dcc:	02 96       	adiw	r24, 0x02	; 2
 dce:	91 83       	std	Z+1, r25	; 0x01
 dd0:	80 83       	st	Z, r24
 dd2:	8a 81       	ldd	r24, Y+2	; 0x02
 dd4:	9b 81       	ldd	r25, Y+3	; 0x03
 dd6:	93 83       	std	Z+3, r25	; 0x03
 dd8:	82 83       	std	Z+2, r24	; 0x02
 dda:	21 15       	cp	r18, r1
 ddc:	31 05       	cpc	r19, r1
 dde:	29 f4       	brne	.+10     	; 0xdea <free+0x92>
 de0:	f0 93 19 02 	sts	0x0219, r31	; 0x800219 <__flp+0x1>
 de4:	e0 93 18 02 	sts	0x0218, r30	; 0x800218 <__flp>
 de8:	3d c0       	rjmp	.+122    	; 0xe64 <free+0x10c>
 dea:	e9 01       	movw	r28, r18
 dec:	fb 83       	std	Y+3, r31	; 0x03
 dee:	ea 83       	std	Y+2, r30	; 0x02
 df0:	49 91       	ld	r20, Y+
 df2:	59 91       	ld	r21, Y+
 df4:	c4 0f       	add	r28, r20
 df6:	d5 1f       	adc	r29, r21
 df8:	ec 17       	cp	r30, r28
 dfa:	fd 07       	cpc	r31, r29
 dfc:	61 f4       	brne	.+24     	; 0xe16 <free+0xbe>
 dfe:	80 81       	ld	r24, Z
 e00:	91 81       	ldd	r25, Z+1	; 0x01
 e02:	84 0f       	add	r24, r20
 e04:	95 1f       	adc	r25, r21
 e06:	02 96       	adiw	r24, 0x02	; 2
 e08:	e9 01       	movw	r28, r18
 e0a:	99 83       	std	Y+1, r25	; 0x01
 e0c:	88 83       	st	Y, r24
 e0e:	82 81       	ldd	r24, Z+2	; 0x02
 e10:	93 81       	ldd	r25, Z+3	; 0x03
 e12:	9b 83       	std	Y+3, r25	; 0x03
 e14:	8a 83       	std	Y+2, r24	; 0x02
 e16:	e0 e0       	ldi	r30, 0x00	; 0
 e18:	f0 e0       	ldi	r31, 0x00	; 0
 e1a:	12 96       	adiw	r26, 0x02	; 2
 e1c:	8d 91       	ld	r24, X+
 e1e:	9c 91       	ld	r25, X
 e20:	13 97       	sbiw	r26, 0x03	; 3
 e22:	00 97       	sbiw	r24, 0x00	; 0
 e24:	19 f0       	breq	.+6      	; 0xe2c <free+0xd4>
 e26:	fd 01       	movw	r30, r26
 e28:	dc 01       	movw	r26, r24
 e2a:	f7 cf       	rjmp	.-18     	; 0xe1a <free+0xc2>
 e2c:	8d 91       	ld	r24, X+
 e2e:	9c 91       	ld	r25, X
 e30:	11 97       	sbiw	r26, 0x01	; 1
 e32:	9d 01       	movw	r18, r26
 e34:	2e 5f       	subi	r18, 0xFE	; 254
 e36:	3f 4f       	sbci	r19, 0xFF	; 255
 e38:	82 0f       	add	r24, r18
 e3a:	93 1f       	adc	r25, r19
 e3c:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <__brkval>
 e40:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <__brkval+0x1>
 e44:	28 17       	cp	r18, r24
 e46:	39 07       	cpc	r19, r25
 e48:	69 f4       	brne	.+26     	; 0xe64 <free+0x10c>
 e4a:	30 97       	sbiw	r30, 0x00	; 0
 e4c:	29 f4       	brne	.+10     	; 0xe58 <free+0x100>
 e4e:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <__flp+0x1>
 e52:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <__flp>
 e56:	02 c0       	rjmp	.+4      	; 0xe5c <free+0x104>
 e58:	13 82       	std	Z+3, r1	; 0x03
 e5a:	12 82       	std	Z+2, r1	; 0x02
 e5c:	b0 93 17 02 	sts	0x0217, r27	; 0x800217 <__brkval+0x1>
 e60:	a0 93 16 02 	sts	0x0216, r26	; 0x800216 <__brkval>
 e64:	df 91       	pop	r29
 e66:	cf 91       	pop	r28
 e68:	08 95       	ret

00000e6a <_exit>:
 e6a:	f8 94       	cli

00000e6c <__stop_program>:
 e6c:	ff cf       	rjmp	.-2      	; 0xe6c <__stop_program>
